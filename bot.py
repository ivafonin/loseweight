import telebot as tb
from telebot import types,util
import users
import workwithdb

token = "bottoken"
bot = tb.TeleBot(token)
def webAppKeyboard(): #—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å webapp –∫–Ω–æ–ø–∫–æ–π
   keyboard = types.ReplyKeyboardMarkup(row_width=1,resize_keyboard=True) #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
   webAppTest = types.WebAppInfo("https://calorizator.ru/analyzer/products") #—Å–æ–∑–¥–∞–µ–º webappinfo - —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è url
   one_butt = types.KeyboardButton(text="–¢–µ—Å—Ç WebAPP", web_app=webAppTest) #—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ webapp
   keyboard.add(one_butt) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

   return keyboard #–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

@bot.message_handler(commands=['start'],chat_types='private')
def start_cmd(message):
    if workwithdb.find_userinfo(message.from_user.username,1) == "":
        bot.send_message(message.chat.id,'–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —á–∞—Ç-–±–æ—Ç –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–æ–π–¥—ë—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ.\n–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:')
        bot.register_next_step_handler(message, namegetter)
    else:
        kb = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–ù–æ–≤—ã–π –ø—Ä–∏–µ–º –ø–∏—â–∏",callback_data='priem')
        btn2 = types.InlineKeyboardButton("–ß—Ç–æ —è –µ–ª?",callback_data='whatieat')
        btn3 = types.InlineKeyboardButton("–ò–Ω—Ñ–æ",callback_data='info')
        btn4 = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ",callback_data='profile')
        kb.row(btn1)
        kb.row(btn2,btn3)
        kb.row(btn4)
        bot.send_message(message.chat.id,'–≠—Ç–æ –º–µ–Ω—é. –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º –ø–∏—Ç–∞–Ω–∏–µ–º.',reply_markup=kb)




@bot.callback_query_handler(func= lambda callback:callback.data == "priem")
def priem_pishi(callback):
    bot.send_message(callback.message.chat.id, '–ü–æ–≥–Ω–∞–ª–∏!', reply_markup=webAppKeyboard())
    #   keybord = types.InlineKeyboardMarkup(row_width=3)
  #  btn1 = types.InlineKeyboardButton('–ú—è—Å–æ',callback_data='meat')
   # btn2 = types.InlineKeyboardButton('–û–≤–æ—â–∏',callback_data='veget')
    #btn3 = types.InlineKeyboardButton('–§—Ä—É–∫—Ç—ã',callback_data='fruts')
    #btn4 = types.InlineKeyboardButton('–†—ã–±–∞',callback_data='fish')
    #btn5 = types.InlineKeyboardButton("–û—Ä–µ—Ö–∏",callback_data='orechs')
    #btn6 = types.InlineKeyboardButton("–°–ª–∞–¥–æ—Å—Ç–∏/–ú—É—á–Ω–æ–µ",callback_data='sweets')
    #btn7 = types.InlineKeyboardButton("–ì–∞—Ä–Ω–∏—Ä",callback_data='dishmain')
    #keybord.row(btn1,btn2,btn3)
    #keybord.row(btn4,btn5,btn7)
    #keybord.row(btn6)

   # bot.send_message(callback.message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",reply_markup=keybord)


#@bot.callback_query_handler(func= lambda x:x.data in ['meat','veget','fruts','fish','orechs','sweets','dishmain'])
#def getfood(callback):
    #users.dish = callback.data
    #bot.register_next_step_handler(callback.message,kkal)
#def kkal(message):
    #print(message.text,users.dish)





@bot.message_handler(commands=['premium'],chat_types='private')
def ispremium(message):
    bot.send_message(message.chat.id,"<i>–ü—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å.</i>",parse_mode="HTML")


@bot.message_handler(commands=['lk'],chat_types='private')
def showprofile(message):

    bot.send_message(message.chat.id,f'–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{workwithdb.find_userinfo(message.from_user.username,1)} - –ü—Å–≤–¥–æ–Ω–∏–º.\n{workwithdb.find_userinfo(message.from_user.username,2)} - –í–∞—à–µ –∏–º—è.\n{workwithdb.find_userinfo(message.from_user.username,3)} - –í–∞—à —Ä–æ—Å—Ç.\n{workwithdb.find_userinfo(message.from_user.username,4)} - –í–∞—à –≤–µ—Å.\n<b>–ü–æ–¥–ø–∏—Å–∫–∞ Premium - –ù–µ –ê–∫—Ç–∏–≤–Ω–∞</b> ',parse_mode="HTML")


@bot.callback_query_handler(func= lambda callback:callback.data == "profile")
def showprofile(callback):

    bot.send_message(callback.message.chat.id,f'–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{workwithdb.find_userinfo(callback.from_user.username,1)} - –ü—Å–≤–¥–æ–Ω–∏–º.\n{workwithdb.find_userinfo(callback.from_user.username,2)} - –í–∞—à–µ –∏–º—è.\n{workwithdb.find_userinfo(callback.from_user.username,3)} - –í–∞—à —Ä–æ—Å—Ç.\n{workwithdb.find_userinfo(callback.from_user.username,4)} - –í–∞—à –≤–µ—Å.\n<b>–ü–æ–¥–ø–∏—Å–∫–∞ Premium - –ù–µ –ê–∫—Ç–∏–≤–Ω–∞</b> ',parse_mode="HTML")


@bot.callback_query_handler(func = lambda callback:callback.data =="info")
def infocb(callback):
    bot.send_message(callback.message.chat.id,"üîò –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç: üîò")
    sovet = users.get_sovet()
    bot.send_message(callback.message.chat.id,sovet)


@bot.callback_query_handler(func= lambda callback:callback.data)
def yesd(callback):
    if 'yesn' in callback.data:
        callback1=callback.data.split()
        users.name = callback1[1]
        print(users.name)
        bot.send_message(callback.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:')
        bot.register_next_step_handler(callback.message,rost)
    if callback.data =="non":
        bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è")
        bot.register_next_step_handler(callback.message, namegetter)
def namegetter(message):
    kb = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–î–∞',callback_data=f'yesn {message.text}')
    btn2=types.InlineKeyboardButton(text='–ù–µ—Ç',callback_data='non')
    kb.add(btn1)
    kb.add(btn2)
    bot.send_message(message.chat.id,f"–í–∞—à–µ –∏–º—è - {message.text}, –≤–µ—Ä–Ω–æ?",reply_markup=kb)
def rost(message):
    users.rost = message.text
    print(users.rost)
    bot.reply_to(message,'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å:')
    bot.register_next_step_handler(message,ves)
def ves(message):
    users.weight = message.text
    print(users.weight)
    keyb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
    keyb.add(btn)
    workwithdb.newuser(message.from_user.username,users.name,users.rost,users.weight)
    bot.reply_to(message,"–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –ú—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É!")
    bot.send_message(message.chat.id,f'–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:{message.from_user.username} - –ü—Å–≤–¥–æ–Ω–∏–º.\n{users.name} - –í–∞—à–µ –∏–º—è.\n {users.rost} - –í–∞—à —Ä–æ—Å—Ç.\n{users.weight} - –í–∞—à –≤–µ—Å.',reply_markup=keyb)


@bot.message_handler(content_types=['text'],func= lambda x:x.text=="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
def onnext(msg):
    if users.name != "":
        bot.send_message(msg.chat.id,'–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã')
        newtext= util.smart_split(users.text,500)
        keyb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton('/start')
        keyb.add(btn)
        for i in newtext:
            bot.send_message(msg.chat.id, i,reply_markup=keyb)

bot.infinity_polling()